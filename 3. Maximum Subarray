Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

My C++ solution : 
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int m,n=0;
        if(nums.size()==1) return nums[0];
        n = nums[0];
        m = nums[0];
        for(auto i=nums.begin()+1;i!=nums.end();i++)
        {
            n = max(*i,n+*i);
            m = max(m,n);
        }
     return m;   
    }
};
