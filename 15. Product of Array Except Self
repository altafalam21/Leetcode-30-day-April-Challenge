Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        long long int p = 1;
        int zero=0;
        if(nums.size()==0) return nums;
        for(int i=0;i<nums.size();i++)
        {
            if(zero==2) break;
            if(nums[i]==0) 
            {
                zero++;
                continue;
            }
            p = p * nums[i];
        }
        if(zero==2)
        {
        for(int i=0;i<nums.size();i++) nums[i]=0;
        return nums;
        }
        if(zero==1)
        {
        for(int i=0;i<nums.size();i++) 
        {
            if(nums[i]!=0) nums[i]=0;
            else nums[i]=p;
        }
        }
        if(zero==0)
        {
            for(int i=0;i<nums.size();i++)
            {
                nums[i] = p/nums[i];
            }
        }
        return nums;
    }
};
