Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        if(nums.size()==0) return 0;
        int sums = 0;
        int count =0;
        unordered_map<int,int> s;
        s[0]=1;        
        for(int i=0;i<n;i++)
        {
            sums = sums + nums[i];
            if(s.find(sums-k)!=s.end()){
                count = count + s[sums-k];
            }
            s[sums] = s[sums]+1;
        }
        return count;
    }
};
