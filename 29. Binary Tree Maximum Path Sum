Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42


 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int max_pathSum=INT_MIN;
    int maxPathSum(TreeNode* root) {
        pathSum(root);
        return max_pathSum;
    }
    int pathSum(TreeNode *root)
    {
        if(root==NULL) return 0;
        int l = max(0,pathSum(root->left));
        int r = max(0,pathSum(root->right));
        max_pathSum = max(max_pathSum,l+r+root->val);
        return max(l,r) + root->val;
    }
    
};
